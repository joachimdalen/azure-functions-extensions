trigger: none

pool:
  vmImage: "ubuntu-latest"

parameters:
  - name: "WRITE_LOG"
    type: boolean
    default: false
    displayName: "Write logfiles"
  - name: "AZURITE_SILENT"
    type: boolean
    default: true
    displayName: "Run Azurite in silent mode"
  - name: UPDATED_PACKAGE_VERSION
    type: string
    displayName: 'Package Version'
    default: 'not-set'
  - name: "INCREASE_MAJOR"
    type: boolean
    default: false
    displayName: "Increase Major Version"
  - name: "INCREASE_MINOR"
    type: boolean
    default: false
    displayName: "Increase Minor Version"
  - name: "INCREASE_PATCH"
    type: boolean
    default: false
    displayName: "Increase Patch Version"
variables:
  BUILD_CONFIGURATION: "Release"

stages:
  - stage: buildAndTest
    displayName: "Build & Test"
    jobs:
      - job: "Build"
        displayName: "Build job"
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - task: NodeTool@0
            displayName: "Install nodeJS"
            inputs:
              versionSpec: "13.x"
              checkLatest: true
          - task: Bash@3
            displayName: "Install Azurite"
            inputs:
              targetType: inline
              script: npm i -g azurite
          - task: Bash@3
            displayName: "Install Core Tools"
            inputs:
              targetType: inline
              script: npm i -g azure-functions-core-tools@3
          - task: DotNetCoreCLI@2
            displayName: "Restore project dependencies"
            inputs:
              command: 'restore'
              projects: '**/*.csproj'
              verbosityRestore: 'Normal'
          - task: DotNetCoreCLI@2
            displayName: "Build the project - $(BUILD_CONFIGURATION)"
            inputs:
              command: "build"
              arguments: "--no-restore --configuration $(BUILD_CONFIGURATION)"
              projects: "**/*.csproj"
          - task: PowerShell@2
            condition: eq(parameters.UPDATED_PACKAGE_VERSION, 'not-set')
            inputs:
              filePath: '$(Build.SourcesDirectory)/ci/get-updated-package-version.ps1'
              arguments: '-IncreaseMajor ${{ parameters.INCREASE_MAJOR }} -IncreaseMinor ${{ parameters.INCREASE_MINOR }} -IncreasePatch ${{ parameters.INCREASE_PATCH }}'
              failOnStderr: true
              showWarnings: true
              pwsh: true
          - task: DotNetCoreCLI@2
            inputs:
              command: 'pack'
              packagesToPack: '$(Build.SourcesDirectory)/src/JoachimDalen.AzureFunctions.Extensions/JoachimDalen.AzureFunctions.Extensions.csproj'
              packDirectory: '$(Build.ArtifactStagingDirectory)/nuget'
              nobuild: true
              includesymbols: true
              versioningScheme: 'byEnvVar'
              versionEnvVar: 'UPDATED_PACKAGE_VERSION'
          - task: Bash@3
            inputs:
              targetType: inline
              script: ls $(Build.ArtifactStagingDirectory)/nuget
          # - task: DotNetCoreCLI@2
          #   displayName: "Run Tests"
          #   env:
          #     AFTU_RUN_AZURITE: true
          #     AFTU_FUNC_APP_PATH: '../../../../Integration.FunctionApp/bin/Release/netcoreapp3.1'
          #     AFTU_WRITE_LOG: ${{ parameters.WRITE_LOG }}
          #     AFTU_AZURITE_SILENT: ${{ parameters.AZURITE_SILENT }}
          #   inputs:
          #     command: "test"
          #     projects: "**/*Tests/*IntegrationTests.csproj"
          #     arguments: '--configuration $(BUILD_CONFIGURATION)  --collect "Code coverage"'
          #     testRunTitle: "Integration Tests"
          - task: Bash@3
            condition: and(always(), eq(${{ parameters.WRITE_LOG }}, true))
            inputs:
              targetType: "inline"
              script: "cp -r /tmp/aftu $(Build.ArtifactStagingDirectory)"
          - task: PublishPipelineArtifact@1
            condition: and(always(), eq(${{ parameters.WRITE_LOG }}, true))
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/aftu"
              artifact: "aftu-logs"
              publishLocation: "pipeline"